syntax = "proto3";

package ivanitskiy.grpc_workshop.schema.user;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";

import "validate/validate.proto";

option go_package = "github.com/ivanitskiy/grpc-demo-go/pbgen/schema/user";

service UserService {
  rpc CreateUser(UserProfile) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/users"
      body : "*"
    };
  }
}

// UserProfile
//
// x-displayName: "User Profile message"
message UserProfile {
  // type
  //
  // x-displayName: "Type"
  // type of the user
  UserType type = 1;

  // locale
  //
  // x-displayName: "Locale"
  // x-example: "value"
  // locale of the user (defaults to English)
  string locale = 2;

  // first_name
  //
  // x-displayName: "First Name"
  // x-example: "value"
  // user's first name
  string first_name = 3;

  // last_name
  //
  // x-displayName: "Last Name"
  // x-example: "value"
  // user's last name
  string last_name = 4;

  // email
  //
  // x-displayName: "Email"
  // x-example: "value"
  // user's email
  string email = 5 [ (validate.rules).string.email = true ];
}

// UserType
//
// x-displayName: "User Type"
// UserType is to identify the type of user
enum UserType {
  // User
  // x-displayName: "User"
  // Regular User
  USER = 0;
  // Service User
  // x-displayName: "Service User"
  // User for accessing only APIs/services
  SERVICE = 1;

  // Debug
  // x-displayName: "Debug"
  // Power user
  POWER = 2;
}

service BookService {
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
      post : "/v1/books"
      body : "book"
    };
  }

  // Update a book.
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    option (google.api.http) = {
      put : "/v1/books/{book.id}"
      body : "book"
    };
  }

  rpc GetBook(IdMessage) returns (Book) {
    option (google.api.http) = {
      get : "/v1/books/{id}"
    };
  }

  rpc DeleteBook(IdMessage) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/books/{id}"
    };
  }
}

message IdMessage {
  string id = 1;
}

message Book {
  string name = 1;
  string id = 2;
  google.protobuf.Timestamp create_time = 3;
  string publisher = 4;
}

message CreateBookRequest {
  Book book = 2;
}

message UpdateBookRequest {
  Book book = 1 [ (google.api.field_behavior) = REQUIRED ];
  google.protobuf.FieldMask update_mask = 2;
  bool allow_missing = 3;
}
